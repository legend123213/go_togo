// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/legend123213/go_togo/Task08/task-manager/Domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskInterface is an autogenerated mock type for the TaskInterface type
type TaskInterface struct {
	mock.Mock
}

// SAddTask provides a mock function with given fields: task
func (_m *TaskInterface) SAddTask(task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for SAddTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Task) (*domain.Task, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*domain.Task) *domain.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDeleteTask provides a mock function with given fields: id
func (_m *TaskInterface) SDeleteTask(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SDeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SEditTask provides a mock function with given fields: id, t
func (_m *TaskInterface) SEditTask(id string, t *domain.Task) (*domain.Task, error) {
	ret := _m.Called(id, t)

	if len(ret) == 0 {
		panic("no return value specified for SEditTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *domain.Task) (*domain.Task, error)); ok {
		return rf(id, t)
	}
	if rf, ok := ret.Get(0).(func(string, *domain.Task) *domain.Task); ok {
		r0 = rf(id, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *domain.Task) error); ok {
		r1 = rf(id, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SGetTask provides a mock function with given fields: id, username
func (_m *TaskInterface) SGetTask(id string, username string) (*domain.Task, error) {
	ret := _m.Called(id, username)

	if len(ret) == 0 {
		panic("no return value specified for SGetTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.Task, error)); ok {
		return rf(id, username)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.Task); ok {
		r0 = rf(id, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SGetTasks provides a mock function with given fields: user_id
func (_m *TaskInterface) SGetTasks(user_id string) ([]domain.Task, error) {
	ret := _m.Called(user_id)

	if len(ret) == 0 {
		panic("no return value specified for SGetTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Task, error)); ok {
		return rf(user_id)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Task); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskInterface creates a new instance of TaskInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskInterface {
	mock := &TaskInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
